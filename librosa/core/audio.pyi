from _typeshed import Incomplete
from collections.abc import Generator

def load(path, *, sr: int = ..., mono: bool = ..., offset: float = ..., duration: Incomplete | None = ..., dtype=..., res_type: str = ...): ...
def stream(path, *, block_length, frame_length, hop_length, mono: bool = ..., offset: float = ..., duration: Incomplete | None = ..., fill_value: Incomplete | None = ..., dtype=...) -> Generator[Incomplete, None, None]: ...
def to_mono(y): ...
def resample(y, *, orig_sr, target_sr, res_type: str = ..., fix: bool = ..., scale: bool = ..., axis: int = ..., **kwargs): ...
def get_duration(*, y: Incomplete | None = ..., sr: int = ..., S: Incomplete | None = ..., n_fft: int = ..., hop_length: int = ..., center: bool = ..., filename: Incomplete | None = ...): ...
def get_samplerate(path): ...
def autocorrelate(y, *, max_size: Incomplete | None = ..., axis: int = ...): ...
def lpc(y, *, order, axis: int = ...): ...
def zero_crossings(y, *, threshold: float = ..., ref_magnitude: Incomplete | None = ..., pad: bool = ..., zero_pos: bool = ..., axis: int = ...): ...
def clicks(*, times: Incomplete | None = ..., frames: Incomplete | None = ..., sr: int = ..., hop_length: int = ..., click_freq: float = ..., click_duration: float = ..., click: Incomplete | None = ..., length: Incomplete | None = ...): ...
def tone(frequency, *, sr: int = ..., length: Incomplete | None = ..., duration: Incomplete | None = ..., phi: Incomplete | None = ...): ...
def chirp(*, fmin, fmax, sr: int = ..., length: Incomplete | None = ..., duration: Incomplete | None = ..., linear: bool = ..., phi: Incomplete | None = ...): ...
def mu_compress(x, *, mu: int = ..., quantize: bool = ...): ...
def mu_expand(x, *, mu: float = ..., quantize: bool = ...): ...
