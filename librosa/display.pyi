from _typeshed import Incomplete

class TimeFormatter(mplticker.Formatter):
    unit: Incomplete
    lag: Incomplete
    def __init__(self, lag: bool = ..., unit: Incomplete | None = ...) -> None: ...
    def __call__(self, x, pos: Incomplete | None = ...): ...

class NoteFormatter(mplticker.Formatter):
    octave: Incomplete
    major: Incomplete
    key: Incomplete
    unicode: Incomplete
    def __init__(self, octave: bool = ..., major: bool = ..., key: str = ..., unicode: bool = ...) -> None: ...
    def __call__(self, x, pos: Incomplete | None = ...): ...

class SvaraFormatter(mplticker.Formatter):
    Sa: Incomplete
    octave: Incomplete
    major: Incomplete
    abbr: Incomplete
    mela: Incomplete
    unicode: Incomplete
    def __init__(self, Sa, octave: bool = ..., major: bool = ..., abbr: bool = ..., mela: Incomplete | None = ..., unicode: bool = ...) -> None: ...
    def __call__(self, x, pos: Incomplete | None = ...): ...

class LogHzFormatter(mplticker.Formatter):
    major: Incomplete
    def __init__(self, major: bool = ...) -> None: ...
    def __call__(self, x, pos: Incomplete | None = ...): ...

class ChromaFormatter(mplticker.Formatter):
    key: Incomplete
    unicode: Incomplete
    def __init__(self, key: str = ..., unicode: bool = ...) -> None: ...
    def __call__(self, x, pos: Incomplete | None = ...): ...

class ChromaSvaraFormatter(mplticker.Formatter):
    Sa: Incomplete
    mela: Incomplete
    abbr: Incomplete
    unicode: Incomplete
    def __init__(self, Sa: Incomplete | None = ..., mela: Incomplete | None = ..., abbr: bool = ..., unicode: bool = ...) -> None: ...
    def __call__(self, x, pos: Incomplete | None = ...): ...

class TonnetzFormatter(mplticker.Formatter):
    def __call__(self, x, pos: Incomplete | None = ...): ...

class AdaptiveWaveplot:
    times: Incomplete
    samples: Incomplete
    steps: Incomplete
    envelope: Incomplete
    sr: Incomplete
    max_samples: Incomplete
    cid: Incomplete
    ax: Incomplete
    def __init__(self, times, y, steps, envelope, sr: int = ..., max_samples: int = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self, ax, *, signal: str = ...) -> None: ...
    def disconnect(self, *, strict: bool = ...) -> None: ...
    def update(self, ax) -> None: ...

def cmap(data, *, robust: bool = ..., cmap_seq: str = ..., cmap_bool: str = ..., cmap_div: str = ...): ...
def specshow(data, *, x_coords: Incomplete | None = ..., y_coords: Incomplete | None = ..., x_axis: Incomplete | None = ..., y_axis: Incomplete | None = ..., sr: int = ..., hop_length: int = ..., n_fft: Incomplete | None = ..., win_length: Incomplete | None = ..., fmin: Incomplete | None = ..., fmax: Incomplete | None = ..., tuning: float = ..., bins_per_octave: int = ..., key: str = ..., Sa: Incomplete | None = ..., mela: Incomplete | None = ..., thaat: Incomplete | None = ..., auto_aspect: bool = ..., htk: bool = ..., unicode: bool = ..., ax: Incomplete | None = ..., **kwargs): ...
def waveshow(y, *, sr: int = ..., max_points: int = ..., x_axis: str = ..., offset: float = ..., marker: str = ..., where: str = ..., label: Incomplete | None = ..., ax: Incomplete | None = ..., **kwargs): ...
