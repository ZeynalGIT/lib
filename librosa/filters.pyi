from _typeshed import Incomplete

def mel(*, sr, n_fft, n_mels: int = ..., fmin: float = ..., fmax: Incomplete | None = ..., htk: bool = ..., norm: str = ..., dtype=...): ...
def chroma(*, sr, n_fft, n_chroma: int = ..., tuning: float = ..., ctroct: float = ..., octwidth: int = ..., norm: int = ..., base_c: bool = ..., dtype=...): ...
def constant_q(*, sr, fmin: Incomplete | None = ..., n_bins: int = ..., bins_per_octave: int = ..., window: str = ..., filter_scale: int = ..., pad_fft: bool = ..., norm: int = ..., dtype=..., gamma: int = ..., **kwargs): ...
def constant_q_lengths(*, sr, fmin, n_bins: int = ..., bins_per_octave: int = ..., window: str = ..., filter_scale: int = ..., gamma: int = ...): ...
def wavelet_lengths(*, freqs, sr: int = ..., window: str = ..., filter_scale: int = ..., gamma: int = ..., alpha: Incomplete | None = ...): ...
def wavelet(*, freqs, sr: int = ..., window: str = ..., filter_scale: int = ..., pad_fft: bool = ..., norm: int = ..., dtype=..., gamma: int = ..., alpha: Incomplete | None = ..., **kwargs): ...
def cq_to_chroma(n_input, *, bins_per_octave: int = ..., n_chroma: int = ..., fmin: Incomplete | None = ..., window: Incomplete | None = ..., base_c: bool = ..., dtype=...): ...
def window_bandwidth(window, n: int = ...): ...
def get_window(window, Nx, *, fftbins: bool = ...): ...
def mr_frequencies(tuning): ...
def semitone_filterbank(*, center_freqs: Incomplete | None = ..., tuning: float = ..., sample_rates: Incomplete | None = ..., flayout: str = ..., **kwargs): ...
def window_sumsquare(*, window, n_frames, hop_length: int = ..., win_length: Incomplete | None = ..., n_fft: int = ..., dtype=..., norm: Incomplete | None = ...): ...
def diagonal_filter(window, n, *, slope: float = ..., angle: Incomplete | None = ..., zero_mean: bool = ...): ...
